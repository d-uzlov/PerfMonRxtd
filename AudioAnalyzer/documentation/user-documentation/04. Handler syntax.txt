Each handler description is what I call <list of named properties>
It means that it is written like this:
Handler-resampler=type BandResampler | source fft | freqList flist | cubicInterpolation | minCascade [#cascadeSelect] | | someCrazyProperty with value
In the line above:
Rainmeter option name is: Handler-resampler
Handler name is: resampler
Handler type is: BandResampler
property "source" is: fft, which is a name of the handler with type FFT
property "freqList" is: flist
property "cubicInterpolation" is empty, which means it uses default value
property "minCascade" is: [#cascadeSelect], which is a standard Rainmeter way to dereference a variable. Like all rainmeter variables, it is defined somewhere in the [Variables] section of the skin
property "someCrazyProperty" is: with value
    This property does not apply to handlers of type BandResampler, which is why there will be a log warning about unused property.
There is also an empty property description without a name. It doesn't do and doesn't mean anything. Such properties are ignored.



Loudness
Type : { Loudness }
Measures energy a of a signal in such a way that it can be converted to perceived loudness.
The way it works:
Signal energy is calculated for blocks of size (1000/UpdatesPerSecond) milliseconds. Blocks are averaged across TimeWindow milliseconds. However, not all blocks are used: blocks that are almost silent are discarded. But at most gatingLimit*100% blocks can be discarded.
This is similar to how EBU R 128 describes loudness metering.

Properties:

Transform : <transform description> : <empty>
Description on how to transform values before presenting to user.
See Transforms discussion below

UpdatesPerSecond : float in range [0.01, 60] : 20
Speed at which handler is updating its values.
UpdatesPerSecond 10 would mean that every 100 ms value will be updated.
UpdatesPerSecond 1 would mean that value will only be updated once per second.
Higher update rate does not necessary correspond to more accurate perceived loudness. Don't set it too high.

GatingLimit : float in range [0, 1] : 0.5
Specifies the maximum percent of discarded blocks

TimeWindow : float in range [0.01, 10000.0] : 1000
Time in milliseconds.
Specifies size of the block in which loudness is calculated.

GatingDb : float in range [-70, 0] : -20
Values that are in decibels less than GatingDb than an average of a block are considered silent and discarded.

IgnoreGatingForSilence : boolean : true
When you are listening to something and there was small silent moment, perceived loudness is still high. However, when you turn it off, perceived loudness changes instantly, unlike averaging with gating.
IgnoreGatingForSilence ensures that if there is not just something silent in the audio stream, but an absence of any sounds, them loudness value goes down quickly.

Example: type loudness | transform db
Handler info: none



Peak
Type : { peak }
Maximum of an [absolute] value of signal over period of time. Use when you need to know if there was any sound on not, or when detecting possible clipping.

Properties:

Transform : <transform description> : <empty>
Description on how to transform values before presenting to user.
See Transforms discussion below

UpdateInterval : float > 0 : 10
Time in milliseconds of block in which maximum is found.

Example: type peak | UpdateInterval 5
Handler info:
"block size" : size of a block in which maximum is found specified in samples count



Fourier Transform
Type : { fft }
Fourier Transform of the signal. Gives you values of frequencies from 0 to SamplingRate/2 (=Nyquist frequency).
Should always be used with Band handler. You can get values directly from FFT but that doesn't make much sense: there is a variable number of resulting values, which is difficult to manage in skin.

Properties:

BinWidth : float > 0 : 100
Width of one FFT result bin. Actual width of one bin can be slightly less than specified value because FFT parameters are adjusted to make performance better.
The less this option is, the more detailed result you get, but the less frequently values change.
Recommended values are [5, 1000].
fftSize == sampleRate / binWidth
So if you have an AudioLevel skin with FFTSize=4096, then, assuming sampling rate is 48000, corresponding BinWidth is 11.71875
Though, if sample rate is 192000, when same FFTSize=4096 corresponds to BinWidth 46.875, which is completely different story in terms of details of fft result.
This is the reason this plugin uses BinWidth instead of fftSize.
BinWidth also corresponds to native update rate of FFT. If BinWidth is 20 and Overlap is 0, then handler will update its values 20 times per second.

Overlap : float in range [0, 1] : 0.5
Specifies how much FFT windows is moved after each iteration.
Overlap makes FFT update 1 / (1 - overlap) times faster. This makes transitions smoother, but also increases CPU demand.
"Overlap 0.5" is 2 times heavier on CPU than "Overlap 0"
"Overlap 0.9" is 10 times heavier on CPU than "Overlap 0"
"Overlap 0.99" is 100 times heavier on CPU than "Overlap 0"
"Overlap 1.0" would mean infinite loop if it wasn't specially handled.

CascadesCount : integer in range [1, 20] : 5
Plugin can increase resolution in lower frequencies by using cascades of FFT.
See FFT Cascades discussion.

WindowFunction : <window function description> : hann
Window functions make FFT results better. You can read about them in Wikipedia: https://en.wikipedia.org/wiki/Window_function
They make result look cleaner.
Window function is defined as type optionally followed by arguments in brakets. Like this: type[10]
Possible types:
none — no arguments
hann — no arguments
hamming — no arguments
kaiser — one float argument (names alpha on Wikipedia), default value 3.0
exponential — one float argument (named D on Wikipedia), default value 8.69
chebyshev — one float argument (), default value 80.0
You can read about their advantages and disadvantages on Wikipedia, the link is above.
I personally find that kaiser with default alpha is the best. You can experiment to see the difference yourself, maybe you will think that another window is better.

Example: type fft | binWidth 20 |cascadesCount 4 | overlap 0.75 | windowFunction kaiser
Handler info:
"size" : size of the FFT.
"cascades count" : value of cascadesCount option
"overlap" : value of overlap option
"nyquist frequency" : Nyquist frequency of first cascade
"nyquist frequency <integer>" : Nyquist frequency of Nth cascade
"dc" : DC value of first cascade
"dc <integer>" : DC value of Nth cascade
"binWidth" : actual BinWidth of first cascade
"binWidth <integer>" : actual BinWidth of Nth cascade



BandResampler
Type : { BandResampler }
Allows you to get one or more bands from FFT result.
Each cascade of FFT result is resampled to fit into specified list of bands.

Properties:

Source : string : <empty>
Name of FFT source handler.

Bands : <bands description> : <empty>
Description on what bounds bands will have.
Possible types are: log, linear, custom
"log" syntax: log <bands count> <min frequency> <max frequency>
"linear" syntax: linear <bands count> <min frequency> <max frequency>
"custom" syntax: custom <space separated list of frequencies>
Log will generate logarithmically increasing values. Linear will generate evenly distributed values, with custom you can specify anything you want.
Recommended type is log.

MinCascade : integer in range [0, FFT:CascadesCount] : 0
Min cascade that should be used in value calculating.
Set to 0 to use all cascades.
Values other than 0 are meant mainly for testing purposes, because you can increase FFT:BinWidth and get the same result but better performance.
Set to value in range [1; FFT:CascadesCount] to use cascades starting from cascadeMin.

MaxCascade : integer in range [0, FFT:CascadesCount] : 0
Max cascade that should be used in value calculating.
Values other than 0 are meant mainly for testing purposes, because you can decrease FFT:CascadesCount and get the same result but better performance.
Set to value in range [cascadeMin; FFT:CascadesCount] to use cascades from cascadeMin to cascadeMax.
If MaxCascade is less than cascadeMin then all cascades up from cascadeMin are used.

CubicInterpolation : boolean : true
When one there are two bands that both take data from one FFT bin, there is a question on how they should sample data from it.
AudioLevel uses nearest neighbour sampling, which leads to issue of several neighbour bands having the same value.
AudioAnalyzer can do the same, or, when CubicInterpolation is true, it can use fancy cubic resampling, which makes values transitions smooth and creates an illusion of better resolution.

Example: type band | source fft | bands log 150 20 20000
Handler info:
"bands count" : count of bands as specified by freqList.
"lower bound <integer>" : lower frequency bound of Nth band.
"upper bound <integer>" : upper frequency bound of Nth band.
"central frequency <integer>" : center frequency of Nth band.



UniformBlur
type : { UniformBlur }
Allows you to blur values.

Properties:

Radius : float : 1
Radius of blur for the first cascade.

RadiusAdaptation : float : 2
Radius for cascade N is: Radius * RadiusAdaptation^N.

Example: type UniformBlur | source mapper
Handler info: none.


BandCascadeTransformer
type : { BandCascadeTransformer }
Allows you to combine several cascades into one set of final values.

Properties:

MixFunction : { Product, Average } : Product
Determines how different cascades are mixed.
When Average: result = (c1 + c2 + ...) / N.
When Product: result = (c1 * c2 * ...) ^ (1 / N).

MinWeight : float >= 0 : 0.1
Values with weight below MinWeight are thrown away.
Band weight is measured in FFT bins. If band frequency width is the same as FFT bin width, then band weight is 1. If band frequency width is half the width of FFT bin, then band weight is 0.5.

TargetWeight : float >= MinWeight : 2.5
Minimum target weight of band.
Cascades are summed (and averaged at the end) until sum of their weights is less than TargetWeight. TargetWeight allows you to discard slow cascade values when band is already detailed enough.

ZeroLevelMultiplier : float >= 0 : 1
Some FFT cascades may be updated very slowly. When there were a silence and then suddenly some sound, then some cascades may have already be updated while some are still zero. ZeroLevelMultiplier allows you to discard such old values to make transitions from silence to sound look smoother.

Example: type BandCascadeTransformer | source resampler | minWeight 0.25 | targetWeight 10
Handler info: none



ValueTransformer
type : { ValueTransformer }
Allows you to make various changes to values using transform semantics.

Properties:

Transform : <transform description> : <empty>
Description of transforms that are applied to values
See transforms discussion for full list of possible values.

Example: type ValueTransformer | source bands | transform db map[-70, 0] clamp
Handler info: none



Spectrogram
Type : { Spectrogram }
Draws a spectrogram picture. That is: band's values changes in time.
Generates BMP image on disk. Height of the image is determined by number of point in source Handler. Name of the file is: "<folder>\spectrogram-<channel technical name>.bmp". Color of the pixel is linearly interpolated between color points, described by either Colors property, or between BaseColor and MaxColor if Colors property is not present.
Width of the image is determined by length property, heght of the image is determined by number of values in source value. You can control height by changing number of bands in BandResampler handler.

Properties:

Source : string
Name of source handler. Should be name of some handler from FFT transform chain (BandResampler, BandCascadeTransformer, ValueTransformer, or some blur).

Length : integer > 0 : 100
Count of points in time to show. Equals to resulting image width.

Resolution : float > 0 : 50
Time in milliseconds of block that represents one pixel width in image.

Folder : path : <skin folder>
Path to folder where image will be stored.

Colors : <semi-colon separated list of color points> : <empty>
A set of points that describe colors of the spectrogram.
Color point syntax: <value> : <color description>
Values correspond to values from source handler.
<color description> in the simples case can be represented as a comma-separated list of 3or 4 values in range [0.0, 1.0]. In that case values correspond to RGB channels and alpha channel of the color.
See Colors section for full list of color description possible values.
Example: colors 0.0 : 0.1, 0.1, 0.1 ; 1.0 : 0.9, 0.85, 0.5 ; 1.5 : 1.0, 0.0, 0.0

BaseColor : <color description> : 0,0,0
Only used when Colors property is not present.
Color of the space where band values are below 0.

MaxColor : <color description> : 1,1,1
Only used when Colors property is not present.
Color of the space where band values are above 1.

MixMode : { srgb, hsv, hsl, ycbcr } : srgb
Sets the color space in which values are interpolated.

Stationary : boolean : false
When false image is completely redrawn on each update. Image is moving to the left as it updates.
When true image is only redrawn in places where it has changed. All stripes are stationary, but some are replaces with new values.

BorderSize : integer : 0
Define size of the border in the oldest stripes of the image.
It only makes sense to use this property when Stationary is true.

BorderColor : <color description> : 1.0, 0.2, 0.2
Color of the border

FadingPercent : float in range [0, 1] : 0
Oldest FadingPercent * 100% stripes in the image are smoothly faded into the background color.

Example: type spectrogram | source band | length 600 | resolution 0.1*4.8*20 | folder z:/12/ | mixMode hsv | colors 0.0 : 0.1, 0.1, 0.1 ; 1.0: 0.9, 0.85, 0.5 ; 1.5 1.0, 0.0, 0.0 | stationary true | BorderSize 1 | FadingPercent 0.1

Handler info:
"file" : path of the file in which image is written.
"block size" : size of the block that represents one pixel in image, in sample points.



Waveform
Type : { Waveform }
Draws a waveform pisture. That is: shows min and max values of the sound wave over some past time.
Generates BMP image on disk. Name of the file is: "<folder>\wave-<channel technical name>.bmp".

Properties:

Folder : path : <skin folder>
Path to folder where image will be stored.

Width : integer > 0 : 100
Resulting image width. Equals to count of points in time to show.

Height : integer > 0 : 100
Resulting image height.

Resolution : float > 0 : 50
Time in milliseconds of block that represents one pixel width in image.

Stationary : boolean : false
When false image is completely redrawn on each update. Image is moving to the left as it updates.
When true image is only redrawn in places where it has changed. All stripes are stationary, but some are replaces with new values.

Connected : boolean : true
When false draw real min-max values.
When true correct min-max so that waveform on the image doesn't contain gaps.

BackgroundColor : <color description> : 0,0,0
Color of the space where wave is not drawn.

WaveColor : <color description> : 1,1,1
Color of the wave.

LineColor : <color description> : waveColor
Color of the line in zero values.

BorderSize : integer : 0
Define size of the border in the oldest stripes of the image.
It only makes sense to use this property when Stationary is true.

BorderColor : <color description> : 1.0, 0.2, 0.2
Color of the border

FadingPercent : float in range [0, 1] : 0
Oldest FadingPercent * 100% stripes in the image are smoothly faded into the background color.

LineDrawingPolicy : { Always, BelowWave, Never } : always
Resulting image can have horizontal line indicating zero value.
always — draw line above wave.
belowWave — wave will hide line.
never — don't draw line.

Transform : <transform description> : <empty>
Description of transforms that are applied to values after calculating min and max.
Waveform always shows values in range [-1.0, 1.0]. If transform makes values outside of this range, they will not be displayed correctly.

Example: type waveform | width 200 | height 100 | resolution 17 | folder "[#@]" | backgroundColor 0.6,0.6,0.6,0.8 | waveColor 0.1,0.1,0.1 | lineColor 0.5,0.5,0.5
Handler info:
"file" : path of the file in which image is written.
"block size" : size of the block that represents one pixel in image, in audio points.


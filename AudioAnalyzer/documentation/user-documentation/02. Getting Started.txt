Getting Started

Here are simple examples of what this plugin can do:
[.rmskin link placeholder]

Spectrogram
[image placeholder]
This plugin can draw fancy spectrograms (don't confuse them with spectrum meters).
Spectrogram is an image of how spectrum of the sound has changes over a period of time.
It generates an image file on you drive 60 times per second (well, it is optimized not to write when there are no changes), so if you care about your SSD life you probably want to create some small RAM-drive and put it there using 'folder' property of the spectrogram sound handler.
"Bugs & Feature Suggestions" forum is always open for you complaints about how Rainmeter plugins can't transfer pictures directly to Rainmeter, without writing them on drive first. If you are a C++ developer and you know some hacks about directly modifying skins to show pictures, your pull requests are also welcome.

Spectrogram with Waveform
[image placeholder]
This skin shows you that you can draw synchronized waveform and spectrogram. If their appropriate options matches then they will update synchronously.

Spectrum
[image placeholder]
Spectrum is also available.

Waveform
[image placeholder]
This plugin can draw fancy waveform images.
Same thing as with spectrogram: writing on drive, SSD life, yada yada yada.

Loudness meter
[image placeholder]
Digital loudness is always measured in decibels relative to full scale, or dBFS. Simply put, this means that 0 dB is the loudest possible sound, -20 dB is something quieter, and -70 dB is something almost inaudible.
This skin shows something that roughly correlates with perceived loudness. Measuring real loudness is a very complex and challenging topic (and actually this can't be done digitally without special equipment). This skin uses an approximation, and in my opinion this approximation is good enough.
This skin displays both numeric value of current loudness and a bar that shows relative loudness, where empty bar indicates silence and full bar indicated a very loud sound. To do this, it converts decibels in some range (particularly, in range from -50 dB to 0 dB) into range from 0.0 to 1.0 and clamps them to that range so that Bar meter can display it. However, numeric values are not converted and not clamped, so they can show that there is some sound that is too quiet to be displayed on Mar meter.
Note that for loudness calculations there is a 'filter like-a' property specified. Without this property the values it displays would be very-very different from perceived loudness.

There is also a peak meter in the .rmskin file. It acts similar to loudness meter, except what it shows doesn't correlate with perceived loudness. In sound industry peak meters are usually used to detect possible clipping. It just a showcase that you can detect sound peaks, don't use it when you need loudness.
Note that for loudness calculations there is a no 'filter' property specified, which means that there is no filtering done on sound wave. If you were to specify some filter, then it wouldn't measure actual sound peaks anymore. It would measure peaks on some filtered values instead, which is probably not what you want.

Curve Tester
[image placeholder]
There is also a simple tester to show you how different handler chains affect values.
Orange line shows raw RMS value.
Green line shows RMS values converted to decibels. Its purpose is to show that you should always convert your values to decibels, because orange line only reacts to very strong sound. There are quiet sound that you can still clearly hear, and which are you can see on green line but can not see on orange line. If you were to just ramp up value of RMS then it would show you quiet sounds but then loud sounds would just clip on the upper edge of the graph.
There are also blue and white lines. Their purpose is to show that order of handlers matter. Blue line shows RMS values that were first converted into decibels and then filtered/smoothed. White line shows values that were first filtered/smoothed and then converted into decibels. As you can see, the difference is very noticeable. It's up to you to decide which way of calculations suits you better.


Building your skin with AudioAnalyzer plugin

First of all, I spent a lot of time writing meaningful log error and warning messages. When you are writing a skin, have a Rainmeter log window open. If you have made some mistake with syntax, there is a good chance that log will have a message about it. It's very helpful.

Plugin doesn't have a fixed set of possible ways to calculate some values. Instead, it acts somewhat like a DSP-utility and provides you a set of building blocks called 'sound handlers' that may be combined in any amount into any tree-like graph.
They are defined in groups called 'processing'. Each processing have: a set of channels on which it acts, a chain (or a tree) of sound handlers that it manages, and some options to transform sound wave, like filtering to make loudness calculations better match perceived loudness.
Usually you only use one processing. However, there are cases where you would want to have several processings. For example, you may want to make FFT of Auto channel, and you don't need it on any other channel, and at the same time you want to display loudness for each available individual channel. In cush case for performance reasons you would want to define one processing that performs only FFT and some transformations on it, and a separate processing that does only loudness calculations.
Or if you want to show spectrogram you should use some filtering in processing, and if you want to show waveform then you shouldn't use any filtering. In such case you would want to define two processings, one if which will use filtering and the other one won't.

If you want to get frequency values, then your processing should contain something like this:
[image placeholder]
FFT -> BandResampler -> [optional transforms] -> BandCascadeTransformer -> [optional transforms] -> ???
On the place of '???' there may be a Spectrogram handler if you are making a skin with a spectrogram, or nothing, if you are making a spectrum skin (then you will probably access values through Child measures).
If you don't want to use cascaded FFT, then you should drop BandCascadeTransformer, and only have a chain like this: FFT -> BandResampler -> [optional transforms]
You should never use raw output of the FFT handler because number of its output values is unspecified. BandResampler allows you to get required number of values which are properly sampled from FFT result. If for some reason you want to get values that are not logarithmically scaled across frequency range, then there are options for linear or custom scale.

Automatic reconfiguring
If you want your skin to react to audio device properties, this plugin provides you with some information.
For example, there is a plugin section variable "device list output" that will give you a list of available audio devices, that you can parse with a LUA script, and then somehow show user a list of devices to choose from. Of there is a "current device, channels" section variable that will give you a list of available audio channels.
See plugin syntax documentation for details.

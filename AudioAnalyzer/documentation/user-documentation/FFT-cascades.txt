
FFT is always a trade-off between frequency resolution and time resolution.
FFT of size N gives you N/2 bins on range [0, SampleFreq/2], which correspond N values of signal, that update every (samplingRate/N) times per second.
If you increase N (with same SampleFreq), then you will get better frequency resolution, but worse time resolution, and bigger complexity of algorithm.
If you increase SampleFreq (with same N) you will get better time resolution, but worse frequency resolution.
You can't have both fast and detailed FFT.
You only need detailed FFT near low frequency values, but FFT has the same resolution across the whole frequency range.

I'm pretty sure that this exact problem is usually solved with Wavelet Transform, but I didn't manage to find a fitting library for them so I came up with my own solution to the problem: cascaded FFT.

When you decrease SampleFreq, you get better frequency resolution near low frequencies at the expense of time resolution. But if you combine two FFTs with different SampleFreq, then you can try to increase frequency resolution while keeping time resolution. That's the idea of cascaded FFT.
There are some complexities about how to combine them, that's why BandCascadeTransformer has a lot of option, which aren't at all simple to understand, but it works, and it's somewhat usable.

// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright (C) 2020 Danil Uzlov

#pragma once
#include "rxtd/audio_analyzer/Version.h"
#include "rxtd/buffer_printer/BufferPrinter.h"
#include "rxtd/option_parsing/OptionParser.h"
#include "rxtd/std_fixes/AnyContainer.h"

namespace rxtd::audio_analyzer::handler {
	struct ExternalMethods {
		using ExternalData = std_fixes::AnyContainer;

		struct CallContext {
			Version version{};
			sview channelName{};
			sview filePrefix{};
			buffer_printer::BufferPrinter& printer;
			option_parsing::OptionParser& parser;

			CallContext() = delete;
		};

		using FinishMethodType = void(*)(const ExternalData& data, const CallContext& context);
		using GetPropMethodType = bool(*)(
			const ExternalData& data,
			isview prop,
			const CallContext& context
		);

		FinishMethodType finish = nullptr;

		// returns true if such prop exists, false otherwise
		GetPropMethodType getProp = nullptr;

		// autogenerated
		friend bool operator==(const ExternalMethods& lhs, const ExternalMethods& rhs) {
			return lhs.finish == rhs.finish
				&& lhs.getProp == rhs.getProp;
		}

		friend bool operator!=(const ExternalMethods& lhs, const ExternalMethods& rhs) {
			return !(lhs == rhs);
		}
	};
}

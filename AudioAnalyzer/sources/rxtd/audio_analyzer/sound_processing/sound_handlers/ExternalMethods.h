/*
 * Copyright (C) 2019-2021 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "rxtd/audio_analyzer/Version.h"
#include "rxtd/buffer_printer/BufferPrinter.h"
#include "rxtd/std_fixes/AnyContainer.h"

namespace rxtd::audio_analyzer::handler {
	struct ExternalMethods {
		using ExternalData = std_fixes::AnyContainer;

		struct CallContext {
			Version version{};
			sview channelName{};
			sview filePrefix{};
		};

		using FinishMethodType = void(*)(const ExternalData& data, const CallContext& context);
		using GetPropMethodType = bool(*)(
			const ExternalData& data,
			isview prop,
			buffer_printer::BufferPrinter& printer,
			const CallContext& context
		);

		FinishMethodType finish = nullptr;

		// returns true if such prop exists, false otherwise
		GetPropMethodType getProp = nullptr;

		// autogenerated
		friend bool operator==(const ExternalMethods& lhs, const ExternalMethods& rhs) {
			return lhs.finish == rhs.finish
				&& lhs.getProp == rhs.getProp;
		}

		friend bool operator!=(const ExternalMethods& lhs, const ExternalMethods& rhs) {
			return !(lhs == rhs);
		}
	};
}

/*
 * Copyright (C) 2020 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "ResamplerProvider.h"
#include "rxtd/audio_analyzer/audio_utils/CustomizableValueTransformer.h"
#include "rxtd/audio_analyzer/audio_utils/filter_utils/LogarithmicIRF.h"
#include "rxtd/audio_analyzer/sound_processing/sound_handlers/HandlerBase.h"

namespace rxtd::audio_analyzer::handler {
	class TimeResampler : public ResamplerProvider {
		using CVT = audio_utils::CustomizableValueTransformer;
		using LogarithmicIRF = audio_utils::filter_utils::LogarithmicIRF;

		struct Params {
			double granularity{};
			double attack{};
			double decay{};
			CVT transformer;

			// autogenerated
			friend bool operator==(const Params& lhs, const Params& rhs) {
				return lhs.granularity == rhs.granularity
					&& lhs.attack == rhs.attack
					&& lhs.decay == rhs.decay
					&& lhs.transformer == rhs.transformer;
			}

			friend bool operator!=(const Params& lhs, const Params& rhs) {
				return !(lhs == rhs);
			}
		};

		Params params{};
		index blockSize{};

		struct LayerData {
			index dataCounter{};
			index waveCounter{};
			LogarithmicIRF lowPass;
			std::vector<float> values;
		};

		std::vector<LayerData> layersData;

	public:
		[[nodiscard]]
		bool vCheckSameParams(const ParamsContainer& p) const override {
			return compareParamsEquals(params, p);
		}

		[[nodiscard]]
		ParamsContainer vParseParams(
			const OptionMap& om, Logger& cl, const Rainmeter& rain,
			Version version
		) const override;

	protected:
		[[nodiscard]]
		ConfigurationResult vConfigure(const ParamsContainer& _params, Logger& cl, ExternalData& externalData) override;

	public:
		void vProcess(ProcessContext context, ExternalData& externalData) override;

	private:
		void processLayer(index waveSize, index layer);
	};
}

/*
 * Copyright (C) 2019-2021 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "rxtd/audio_analyzer/audio_utils/FFT.h"
#include "rxtd/audio_analyzer/audio_utils/FftCascade.h"
#include "rxtd/audio_analyzer/audio_utils/WindowFunctionHelper.h"
#include "rxtd/audio_analyzer/sound_processing/sound_handlers/HandlerBase.h"

namespace rxtd::audio_analyzer::handler {
	class FftAnalyzer : public HandlerBase {
		using WCF = audio_utils::WindowFunctionHelper::WindowCreationFunc;

		struct Params {
		private:
			friend FftAnalyzer;

			double binWidth{};
			double overlap{};

			index cascadesCount{};

			double randomTest{};
			double randomDuration{};

			string wcfDescription{};
			WCF createWindow{};

			// autogenerated
			friend bool operator==(const Params& lhs, const Params& rhs) {
				return lhs.binWidth == rhs.binWidth
					&& lhs.overlap == rhs.overlap
					&& lhs.cascadesCount == rhs.cascadesCount
					&& lhs.randomTest == rhs.randomTest
					&& lhs.randomDuration == rhs.randomDuration
					&& lhs.wcfDescription == rhs.wcfDescription;
			}

			friend bool operator!=(const Params& lhs, const Params& rhs) {
				return !(lhs == rhs);
			}
		};

		struct Snapshot {
			index fftSize{};
			index sampleRate{};
			index cascadesCount{};
		};

		Params params{};

		index fftSize = 0;
		index inputStride = 0;

		index randomBlockSize = 0;
		index randomCurrentOffset = 0;

		enum class RandomState { ON, OFF } randomState{ RandomState::ON };

		std::vector<audio_utils::FftCascade> cascades{};

		audio_utils::FFT fft{};

	public:
		[[nodiscard]]
		bool vCheckSameParams(const ParamsContainer& p) const override {
			return compareParamsEquals(params, p);
		}

		[[nodiscard]]
		ParamsContainer vParseParams(
			const OptionMap& om, Logger& cl, const Rainmeter& rain,
			Version version
		) const override;

	protected:
		[[nodiscard]]
		ConfigurationResult vConfigure(const ParamsContainer& _params, Logger& cl, ExternalData& externalData) override;

	public:
		index getFftSize() const {
			return fftSize;
		}

		void vProcess(ProcessContext context, ExternalData& externalData) override;

	protected:
		ExternalMethods::GetPropMethodType vGetExt_getProp() const override {
			return wrapExternalGetProp<Snapshot, &getProp>();
		}

	private:
		static bool getProp(
			const Snapshot& snapshot,
			isview prop,
			BufferPrinter& printer,
			const ExternalMethods::CallContext& context
		);

		void processRandom(index waveSize, clock::time_point killTime);
	};
}

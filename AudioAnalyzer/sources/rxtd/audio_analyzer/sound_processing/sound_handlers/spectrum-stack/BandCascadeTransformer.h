// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright (C) 2019 Danil Uzlov

#pragma once
#include "BandResampler.h"
#include "rxtd/audio_analyzer/sound_processing/sound_handlers/HandlerBase.h"

namespace rxtd::audio_analyzer::handler {
	class BandCascadeTransformer : public HandlerBase {
		enum class MixFunction {
			eAVERAGE,
			ePRODUCT,
		};

		struct Params {
			float minWeight{};
			float targetWeight{};
			float zeroLevelHard{};
			MixFunction mixFunction{};

			// autogenerated
			friend bool operator==(const Params& lhs, const Params& rhs) {
				return lhs.minWeight == rhs.minWeight
					&& lhs.targetWeight == rhs.targetWeight
					&& lhs.zeroLevelHard == rhs.zeroLevelHard
					&& lhs.mixFunction == rhs.mixFunction;
			}

			friend bool operator!=(const Params& lhs, const Params& rhs) {
				return !(lhs == rhs);
			}
		};

		Params params{};

		const BandResampler* resamplerPtr = nullptr;

		struct CascadeMeta {
			index offset{};
			index nextChunkIndex{};
			array_view<float> data;
			float maxValue{};
		};

		std::vector<CascadeMeta> snapshot;

	public:
		[[nodiscard]]
		bool vCheckSameParams(const ParamsContainer& p) const override {
			return compareParamsEquals(params, p);
		}

		[[nodiscard]]
		index vGetSourcesCount() const override {
			return 1;
		}

		[[nodiscard]]
		ParamsContainer vParseParams(ParamParseContext& context) const noexcept(false) override;

	protected:
		[[nodiscard]]
		ConfigurationResult vConfigure(const ParamsContainer& _params, Logger& cl, ExternalData& externalData) override;

	public:
		void vProcess(ProcessContext context, ExternalData& externalData) override;

	private:
		static const BandResampler* findBandResampler(const HandlerBase* source, Logger& logger);

		[[nodiscard]]
		float computeForBand(index band) const;
	};
}

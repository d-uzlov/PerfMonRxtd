/*
 * Copyright (C) 2019-2020 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "FftAnalyzer.h"
#include "rxtd/audio_analyzer/sound_processing/sound_handlers/HandlerBase.h"
#include "rxtd/std_fixes/Vector2D.h"

namespace rxtd::audio_analyzer::handler {
	class BandResampler final : public HandlerBase {
		struct Params {
			std::vector<float> bandFreqs;
			bool useCubicResampling{};

			// autogenerated
			friend bool operator==(const Params& lhs, const Params& rhs) {
				return lhs.bandFreqs == rhs.bandFreqs
					&& lhs.useCubicResampling == rhs.useCubicResampling;
			}

			friend bool operator!=(const Params& lhs, const Params& rhs) {
				return !(lhs == rhs);
			}
		};

		Params params{};

		FftAnalyzer* fftSource = nullptr;

		Vector2D<float> layerWeights;
		Vector2D<float> bandWeights;
		index bandsCount = 0;

		struct Snapshot {
			std::vector<float> bandFreqs;
		};

	public:
		[[nodiscard]]
		bool vCheckSameParams(const ParamsContainer& p) const override {
			return compareParamsEquals(params, p);
		}

		[[nodiscard]]
		ParamsContainer vParseParams(ParamParseContext& context) const noexcept(false) override;

	private:
		static void parseFreqListElement(OptionList& options, std::vector<float>& freqs, Logger& cl);
		static std::vector<float> parseFreqList(Option freqListOption, Logger& cl);
		static std::vector<float> makeBandsFromFreqs(array_span<float> freqs, Logger& cl);

	protected:
		[[nodiscard]]
		ConfigurationResult vConfigure(const ParamsContainer& _params, Logger& cl, ExternalData& externalData) override;

	public:
		void vProcess(ProcessContext context, ExternalData& externalData) override;

		[[nodiscard]]
		array_view<float> getLayerWeights(index cascade) const {
			return layerWeights[cascade];
		}

		[[nodiscard]]
		array_view<float> getBandWeights(index band) const {
			return bandWeights[band];
		}

	protected:
		ExternalMethods::GetPropMethodType vGetExt_getProp() const override {
			return wrapExternalGetProp<Snapshot, &getProp>();
		}

	private:
		void sampleCascade(array_view<float> source, array_span<float> dest, float binWidth);

		// depends on fft size and sample rate
		void computeWeights(index fftSize);
		void computeCascadeWeights(array_span<float> result, index fftBinsCount, float binWidth);

		static bool getProp(
			const Snapshot& snapshot,
			isview prop,
			BufferPrinter& printer,
			const ExternalMethods::CallContext& context
		);
	};
}

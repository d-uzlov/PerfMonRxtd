/*
 * Copyright (C) 2019-2020 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "array2d_view.h"
#include "../SoundHandler.h"
#include "Vector2D.h"
#include "BandResampler.h"
#include "ResamplerProvider.h"

namespace rxtd::audio_analyzer {
	class legacy_FiniteTimeFilter : public ResamplerProvider {
	public:
		enum class SmoothingCurve {
			FLAT,
			LINEAR,
			EXPONENTIAL,
		};

		struct Params {
			istring sourceId{ };

			SmoothingCurve smoothingCurve{ };
			index smoothingFactor{ };
			double exponentialFactor{ };

			// autogenerated
			friend bool operator==(const Params& lhs, const Params& rhs) {
				return lhs.sourceId == rhs.sourceId
					&& lhs.smoothingCurve == rhs.smoothingCurve
					&& lhs.smoothingFactor == rhs.smoothingFactor
					&& lhs.exponentialFactor == rhs.exponentialFactor;
			}

			friend bool operator!=(const Params& lhs, const Params& rhs) {
				return !(lhs == rhs);
			}
		};

	private:
		Params params{ };

		// pastValues[Layer][FilterSize][Band]
		std::vector<utils::Vector2D<float>> pastValues;
		index pastValuesIndex = 0;

		double smoothingNormConstant{ };

		bool changed = true;

	public:
		[[nodiscard]]
		bool checkSameParams(const std::any& p) const override {
			return compareParamsEquals(params, p);
		}

		void setParams(const std::any& p) override {
			params = std::any_cast<Params>(p);
		}

		[[nodiscard]]
		ParseResult parseParams(
			const OptionMap& om, Logger& cl, const Rainmeter& rain,
			index legacyNumber
		) const override;

	protected:
		[[nodiscard]]
		isview vGetSourceName() const override {
			return params.sourceId;
		}

		[[nodiscard]]
		LinkingResult vFinishLinking(Logger& cl) override;

	public:
		void vReset() override;
		void vProcess(array_view<float> wave) override;
		void vFinish() override;

	private:
		void applyToLayer(utils::array2d_view<float> layerPastValues, array_span<float> dest) const;
	};
}

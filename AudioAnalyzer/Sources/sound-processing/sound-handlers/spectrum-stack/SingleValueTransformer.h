/*
 * Copyright (C) 2020 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "../SoundHandler.h"
#include "RainmeterWrappers.h"
#include "../../../audio-utils/CustomizableValueTransformer.h"
#include "Vector2D.h"
#include "ResamplerProvider.h"

namespace rxtd::audio_analyzer {
	class SingleValueTransformer : public ResamplerProvider {
	public:
		struct Params {
			istring sourceId;

			audio_utils::CustomizableValueTransformer transformer;

			// autogenerated
			friend bool operator==(const Params& lhs, const Params& rhs) {
				return lhs.sourceId == rhs.sourceId
					&& lhs.transformer == rhs.transformer;
			}

			friend bool operator!=(const Params& lhs, const Params& rhs) {
				return !(lhs == rhs);
			}
		};

	private:
		Params params{ };

		index samplesPerSec{ };

		utils::Vector2D<float> values;

	public:
		static std::optional<Params> parseParams(const OptionMap& optionMap, Logger& cl);

		void setParams(Params _params, Channel channel);

		void setSamplesPerSec(index value) override;
		void reset() override;

		void _process(const DataSupplier& dataSupplier) override;

		array_view<float> getData(layer_t layer) const override {
			return values[layer];
		}

		layer_t getLayersCount() const override {
			return layer_t(values.getBuffersCount());
		}
	};
}

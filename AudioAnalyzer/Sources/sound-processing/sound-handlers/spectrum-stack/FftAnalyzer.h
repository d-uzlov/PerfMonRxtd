/*
 * Copyright (C) 2019-2020 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "../SoundHandler.h"
#include "RainmeterWrappers.h"
#include "../../../audio-utils/FFT.h"
#include "../../../audio-utils/FftCascade.h"
#include "../../../audio-utils/InfiniteResponseFilter.h"

namespace rxtd::audio_analyzer {
	class FftAnalyzer : public SoundHandler {
	public:
		enum class SizeBy {
			BIN_WIDTH,
			SIZE,
			SIZE_EXACT
		};

		struct Params {
		private:
			friend FftAnalyzer;

			SizeBy sizeBy;

			double attackTime;
			double decayTime;

			double resolution;
			double overlap;

			layer_t cascadesCount;
			bool correctLoudness;

			double randomTest;
			double randomDuration;
			bool correctZero;

			// autogenerated
			friend bool operator==(const Params& lhs, const Params& rhs) {
				return lhs.sizeBy == rhs.sizeBy
					&& lhs.attackTime == rhs.attackTime
					&& lhs.decayTime == rhs.decayTime
					&& lhs.resolution == rhs.resolution
					&& lhs.overlap == rhs.overlap
					&& lhs.cascadesCount == rhs.cascadesCount
					&& lhs.correctLoudness == rhs.correctLoudness
					&& lhs.randomTest == rhs.randomTest
					&& lhs.randomDuration == rhs.randomDuration
					&& lhs.correctZero == rhs.correctZero;
			}

			friend bool operator!=(const Params& lhs, const Params& rhs) {
				return !(lhs == rhs);
			}
		};

	private:
		Params params{ };

		index samplesPerSec{ };

		index fftSize = 0;
		index inputStride = 0;

		index randomBlockSize = 0;
		index randomCurrentOffset = 0;

		enum class RandomState { ON, OFF } randomState{ RandomState::ON };

		std::vector<audio_utils::FftCascade> cascades{ };
		audio_utils::InfiniteResponseFilter highShelfFilter { };
		audio_utils::InfiniteResponseFilter highPassFilter { };

		audio_utils::FFT fft{ };

		std::vector<float> waveBuffer;
		mutable string propString{ };

	public:
		FftAnalyzer() = default;

		/** This class is non copyable */
		FftAnalyzer(const FftAnalyzer& other) = delete;
		FftAnalyzer(FftAnalyzer&& other) = delete;
		FftAnalyzer& operator=(const FftAnalyzer& other) = delete;
		FftAnalyzer& operator=(FftAnalyzer&& other) = delete;

		static std::optional<Params> parseParams(const utils::OptionMap& optionMap, utils::Rainmeter::Logger& cl);

		double getFftFreq(index fft) const;

		index getFftSize() const;

		void setSamplesPerSec(index samplesPerSec) override;
		void reset() override;

		void _process(const DataSupplier& dataSupplier) override;
		void _processSilence(const DataSupplier& dataSupplier) override;

		void _finish(const DataSupplier& dataSupplier) override {
		}

		layer_t getLayersCount() const override;
		array_view<float> getData(layer_t layer) const override;

		const wchar_t* getProp(const isview& prop) const override;

		void setParams(Params params, Channel channel);

	private:
		void preprocessWave(array_span<float> wave);

		void processRandom(index waveSize);

		void updateParams();
	};
}

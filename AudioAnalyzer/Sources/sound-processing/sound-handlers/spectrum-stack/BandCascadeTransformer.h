/*
 * Copyright (C) 2019 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "../SoundHandler.h"
#include "BandResampler.h"

namespace rxtd::audio_analyzer {
	class BandCascadeTransformer : public SoundHandler {
	public:
		enum class MixFunction {
			AVERAGE,
			PRODUCT,
		};

		struct Params {
		private:
			friend BandCascadeTransformer;

			istring sourceId;

			double minWeight;
			double targetWeight;
			double weightFallback;

			double zeroLevel;
			double zeroLevelHard;
			double zeroWeight;

			MixFunction mixFunction;

			// autogenerated
			friend bool operator==(const Params& lhs, const Params& rhs) {
				return lhs.sourceId == rhs.sourceId
					&& lhs.minWeight == rhs.minWeight
					&& lhs.targetWeight == rhs.targetWeight
					&& lhs.weightFallback == rhs.weightFallback
					&& lhs.zeroLevel == rhs.zeroLevel
					&& lhs.zeroLevelHard == rhs.zeroLevelHard
					&& lhs.zeroWeight == rhs.zeroWeight
					&& lhs.mixFunction == rhs.mixFunction;
			}

			friend bool operator!=(const Params& lhs, const Params& rhs) {
				return !(lhs == rhs);
			}
		};

	private:
		Params params{ };

		index samplesPerSec{ };

		std::vector<float> resultValues{ };

		bool changed = true;
		bool analysisComputed = false;

		struct {
			string analysisString{ };
			layer_t minCascadeUsed = -1;
			layer_t maxCascadeUsed = -1;
			std::vector<layer_t> bandEndCascades{ };
			bool weightError = false;
		} analysis;

	public:
		static std::optional<Params> parseParams(const utils::OptionMap& optionMap, utils::Rainmeter::Logger& cl);

		void setParams(Params _params, Channel channel);

		void setSamplesPerSec(index samplesPerSec) override;
		void reset() override;

		void _process(const DataSupplier& dataSupplier) override;
		void _finish(const DataSupplier& dataSupplier) override;

		array_view<float> getData(layer_t layer) const override {
			return resultValues;
		}

		layer_t getLayersCount() const override {
			return 1;
		}

		layer_t getStartingLayer() const override {
			return analysis.minCascadeUsed;
		}

		bool getProp(const isview& prop, utils::BufferPrinter& printer) const override;

	private:
		void updateValues(const SoundHandler& source, const BandResampler& resampler);
		void computeAnalysis(const BandResampler& resampler, layer_t startCascade, layer_t endCascade);
	};
}

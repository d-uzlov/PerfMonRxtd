/*
 * Copyright (C) 2019-2020 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "../SoundHandler.h"
#include "BandResampler.h"

namespace rxtd::audio_analyzer {
	class BandCascadeTransformer : public SoundHandler {
	public:
		enum class MixFunction {
			AVERAGE,
			PRODUCT,
		};

		struct Params {
		private:
			friend BandCascadeTransformer;

			istring sourceId;

			double minWeight{ };
			double targetWeight{ };
			double weightFallback{ };

			double zeroLevel{ };
			double zeroLevelHard{ };
			double zeroWeight{ };

			MixFunction mixFunction{ };

			// autogenerated
			friend bool operator==(const Params& lhs, const Params& rhs) {
				return lhs.sourceId == rhs.sourceId
					&& lhs.minWeight == rhs.minWeight
					&& lhs.targetWeight == rhs.targetWeight
					&& lhs.weightFallback == rhs.weightFallback
					&& lhs.zeroLevel == rhs.zeroLevel
					&& lhs.zeroLevelHard == rhs.zeroLevelHard
					&& lhs.zeroWeight == rhs.zeroWeight
					&& lhs.mixFunction == rhs.mixFunction;
			}

			friend bool operator!=(const Params& lhs, const Params& rhs) {
				return !(lhs == rhs);
			}
		};

	private:
		Params params{ };

		BandResampler* resamplerPtr = nullptr;

		bool changed = true;

		struct AnalysisInfo {
			string analysisString{ };
			index minCascadeUsed = -1;
			index maxCascadeUsed = -1;
			std::vector<index> bandEndCascades{ };
			bool anyCascadeUsed{ };
		} analysis;

		std::vector<LayerDataId> savedIds;

	public:
		[[nodiscard]]
		bool parseParams(const OptionMap& optionMap, Logger& cl, const Rainmeter& rain, void* paramsPtr, index legacyNumber) const override;

		[[nodiscard]]
		const Params& getParams() const {
			return params;
		}

		void setParams(const Params& value) {
			params = value;
		}

	protected:
		[[nodiscard]]
		isview vGetSourceName() const override {
			return params.sourceId;
		}

		[[nodiscard]]
		LinkingResult vFinishLinking(Logger& cl) override;

	public:
		void vReset() override;
		void vProcess(array_view<float> wave) override;
		void vFinish() override;

		[[nodiscard]]
		index getStartingLayer() const override {
			return analysis.minCascadeUsed;
		}

		bool vGetProp(const isview& prop, utils::BufferPrinter& printer) const override;

	private:
		[[nodiscard]]
		float computeForBand(index band, utils::array2d_view<float> sourceData) const;

		[[nodiscard]]
		static AnalysisInfo computeAnalysis(BandResampler& resampler, double minWeight, double targetWeight);
	};
}

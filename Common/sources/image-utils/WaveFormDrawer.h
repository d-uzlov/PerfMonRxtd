/*
 * Copyright (C) 2020 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once
#include "StripedImage.h"
#include "DiscreetInterpolator.h"
#include "Color.h"

namespace rxtd::utils {
	class WaveFormDrawer {
	public:
		enum class LineDrawingPolicy {
			eNEVER,
			eBELOW_WAVE,
			eALWAYS,
		};

		struct Colors {
			IntColor background;
			IntColor wave;
			IntColor line;
			IntColor border;

			// autogenerated
			friend bool operator==(const Colors& lhs, const Colors& rhs) {
				return lhs.background == rhs.background
					&& lhs.wave == rhs.wave
					&& lhs.line == rhs.line
					&& lhs.border == rhs.border;
			}

			friend bool operator!=(const Colors& lhs, const Colors& rhs) {
				return !(lhs == rhs);
			}
		};

	private:
		struct MinMax {
			index minPixel{ };
			index maxPixel{ };

			// autogenerated
			friend bool operator==(const MinMax& lhs, const MinMax& rhs) {
				return lhs.minPixel == rhs.minPixel
					&& lhs.maxPixel == rhs.maxPixel;
			}

			friend bool operator!=(const MinMax& lhs, const MinMax& rhs) {
				return !(lhs == rhs);
			}
		};

		StripedImage<MinMax> minMaxBuffer{ };
		Vector2D<uint32_t> resultBuffer{ };
		DiscreetInterpolator interpolator;

		index width{ };
		index height{ };

		LineDrawingPolicy lineDrawingPolicy = LineDrawingPolicy::eNEVER;
		bool connected = false;
		index borderSize = 0;
		double fading = 0.0;

		Colors colors{ };

		MinMax prev;

	public:
		WaveFormDrawer();

		void setConnected(bool value) {
			connected = value;
		}

		void setBorderSize(index value) {
			borderSize = value;
		}

		void setFading(double value) {
			fading = value;
		}

		void setStationary(bool value) {
			minMaxBuffer.setStationary(value);
		}

		void setLineDrawingPolicy(LineDrawingPolicy value) {
			lineDrawingPolicy = value;
		}

		void setColors(Colors value) {
			colors = value;
		}

		void setDimensions(index width, index height);

		void fillSilence();

		void fillStrip(double min, double max);

		[[nodiscard]]
		array2d_view<uint32_t> getResultBuffer() const {
			return resultBuffer;
		}

		[[nodiscard]]
		bool isEmpty() const {
			return !minMaxBuffer.isForced();
		}

		void inflate();

	private:
		void inflateLine(index line, array_span<uint32_t> dest, IntColor backgroundColor) const;

		[[nodiscard]]
		bool isWaveAt(index i, index line) const;
	};
}

/*
 * Copyright (C) 2019-2020 rxtd
 *
 * This Source Code Form is subject to the terms of the GNU General Public
 * License; either version 2 of the License, or (at your option) any later
 * version. If a copy of the GPL was not distributed with this file, You can
 * obtain one at <https://www.gnu.org/licenses/gpl-2.0.html>.
 */

#pragma once

namespace rxtd::utils {
	class Color {
		float red = 0.0;
		float green = 0.0;
		float blue = 0.0;
		float alpha = 1.0;

	public:
		Color() = default;

		Color(float red, float green, float blue, float alpha) :
			red(red),
			green(green),
			blue(blue),
			alpha(alpha) {
		}

		explicit Color(uint32_t value) {
			index a = (value >> 24) & 0xFF;
			index r = (value >> 16) & 0xFF;
			index g = (value >> 8) & 0xFF;
			index b = (value >> 0) & 0xFF;

			constexpr float coef = 1 / 255.0;
			alpha = a * coef;
			red = r * coef;
			green = g * coef;
			blue = b * coef;
		}

		Color operator*(float value) const {
			return { red * value, green * value, blue * value, alpha * value };
		}

		Color operator+(const Color& other) const {
			return { red + other.red, green + other.green, blue + other.blue, alpha + other.alpha };
		}

		// Doesn't alter alpha, unlike operator*
		Color amplify(float value) const {
			return { red * value, green * value, blue * value, alpha };
		}

		// autogenerated
		friend bool operator==(const Color& lhs, const Color& rhs) {
			return lhs.red == rhs.red
				&& lhs.green == rhs.green
				&& lhs.blue == rhs.blue
				&& lhs.alpha == rhs.alpha;
		}

		friend bool operator!=(const Color& lhs, const Color& rhs) {
			return !(lhs == rhs);
		}

		uint32_t toInt() const {
			const uint8_t r = uint8_t(std::clamp<float>(red * 255, 0.0, 255.0));
			const uint8_t g = uint8_t(std::clamp<float>(green * 255, 0.0, 255.0));
			const uint8_t b = uint8_t(std::clamp<float>(blue * 255, 0.0, 255.0));
			const uint8_t a = uint8_t(std::clamp<float>(alpha * 255, 0.0, 255.0));

			return a << 24 | r << 16 | g << 8 | b;
		}
	};

}
